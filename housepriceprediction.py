# -*- coding: utf-8 -*-
"""HousePricePrediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dy2fo9AT4btNPUfWM_MZGD8s7tqvXskd
"""

# Import Dependencies
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import sklearn.datasets
from sklearn.model_selection import train_test_split
from xgboost import XGBRegressor
from sklearn import metrics

#Import House Price (hp) Dataset
hp_dataset = sklearn.datasets.load_boston()

print(hp_dataset)

#Load dataset to Pandas dataframe
hp_dataframe = pd.DataFrame(hp_dataset.data, columns=hp_dataset.feature_names)

hp_dataframe.head()

#Load Target (prices) file to Dataframe
hp_dataframe['price'] = hp_dataset.target

hp_dataframe.head()

#Checking # of rows and columns
hp_dataframe.shape

#Check for missing values
hp_dataframe.isnull().sum()

#Statistcal overview
hp_dataframe.describe()

#Understanding Correlation between features
correlation = hp_dataframe.corr()

print(correlation)

correlation.head()

#Construct heatmap to understand correlation
plt.figure(figsize=(10,10))
sns.heatmap(correlation, cbar=True, square=False, fmt='.1f', annot=True, annot_kws={'size':10}, cmap='cool_r')

#Splitting data and target
X = hp_dataframe.drop(['price'], axis =1)
Y = hp_dataframe['price']

X.head()

Y.head()

#Spliting the data
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

#Training the model to XGBoost Regessor

model = XGBRegressor()
model.fit(X_train, Y_train)

#Evaluating the metrics for Training Model
prediction_training = model.predict(X_train)

print(prediction_training)

#R squared Errors Training data
score_1 = metrics.r2_score(Y_train, prediction_training)

#Mean Abs Error Training data
score_2 = metrics.mean_absolute_error(Y_train, prediction_training)

#Visualize actual vs predicted prices - Training data

a = plt.scatter(Y_train, prediction_training)
plt.xlabel("Actual Prices")
plt.ylabel("Predicted Prices")
plt.title("Actual price vs Predicted price")
plt.show()

print('R-squared error: ', score_1)
print('Mean Absolute Error: ',score_2)

#Test Data Accuracy

prediction_test = model.predict(X_test)

#R squared Errors Training data
score_3 = metrics.r2_score(Y_test, prediction_test)
#Mean Abs Error
score_4 = metrics.mean_absolute_error(Y_test, prediction_test)

print('R-squared error: ', score_3)
print('Mean Absolute Error: ',score_4)